#PIP プロジェクト単位で仮想環境構築

python -m venv .venv #1. 作成

.\.venv\Scripts\activate #2. 有効化

pip install ... # 3. パッケージをインストール

deactivate #4. 無効化


Remove-Item -Recurse -Force .venv #仮想環境を完全に削除する

#効率的なコマンド
python -m venv venv #作成
.\venv\Scripts\activate ＃有効化
pip install fastapi uvicorn pipreqs ＃常に監視


#pipreqs は、プロジェクトのソースコードを解析して、実際にインポートされているパッケージを検出し、その一覧から requirements.txt を生成します。不要なパッケージが除外され、実際の使用パッケージだけをリストアップできるため、より「すっきり」した内容になります。

pipreqs . --force
pipreqs . --force --encoding=utf-8 #shift-jisだとエラーが出る場合


#pip freeze は仮想環境にインストールされているすべてのパッケージを含むため、
プロジェクトに不要なものも混ざることがあります。
pip freeze > requirements.txt

PyPI パッケージをアップデートするには pip install に --upgrade オプションを付けて実行します。
$ python pip install --upgrade pip # upgrade -> -U オプションを使うこともできます。



#uv を使った実装
uvは 高速な動作、クロスプラットフォーム対応のロックファイル、ツール管理の専用インターフェースを提供することで、快適な開発環境を実現しています。

#uvアップグレード
uv self update *アンインストールは、インストールディレクトリからuvのバイナリを削除

#初期化処理
uv init ***projectname***

#仮想環境の作成とアクティブ化
uv venv
.venv\Scripts\activate

#外部ライブラリインポート（dependencies）
uv add ****

#スクリプトの実行
uv run ****.py
