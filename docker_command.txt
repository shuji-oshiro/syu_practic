基本動作確認 *****前提条件：ubuntsログイン中*****

1)WSL から Docker が使えるかチェック
docker version

もしちゃんとつながっていれば、Client / Server のバージョン情報が出るはず！


2)もし docker: command not found が出たら？
docker クライアントがまだ入ってない or dockerDesktopが起動していない

3）もし「permission denied」と言われたら
ubuntsのログインユーザーの権限を確認する
sudo usermod -aG docker $USER　入っていなび場合、dockerへのアクセス権限を追加（要再起動）

4）確認できたら試してみよう！
docker run hello-world

返信があればOK

5)「ホストのポート5000をコンテナのポート5000にバインド」http://localhost:5000 でアクセス可
docker run -p 5000:5000 myapp



開発用 Docker 環境を作る

1）プロジェクト直下に Dockerfileが必要：

# ベースイメージ
FROM python:3.11-slim

# 作業ディレクトリを指定
WORKDIR /app

# 依存ファイルコピー＆インストール（空でもOK）
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# アプリのコードをコピー
COPY app/ .

# 実行コマンド
CMD ["python", "main.py"]


2）Dockerイメージをビルド
docker build -t my-python-app .


3）コンテナを実行
docker run my-python-app　 *run --rmで実行後削除されるようだがError発生する


4）便利機能：ボリュームマウント
docker run -v $(pwd)/app:/app my-python-app*ビルド時に指定した名前

-v <ホスト側のパス>:<コンテナ側のパス> 


Docker操作

1） 「動いてるコンテナ」だけを止めたいとき
docker ps → 動いてるコンテナ一覧が出るから、CONTAINER ID を確認して…
docker stop <コンテナID>


 2）Docker 全体（デーモン）を止めたいとき
これは Docker Desktop アプリ自体を終了する必要がある。
画面右下（タスクトレイ）の🐳アイコンを右クリック
👉「Quit Docker Desktop」を選択

3） WSL内のDocker（WSL統合）を止めたいとき
wsl --shutdown
これは WSL全体を完全にシャットダウンするコマンド。 → Docker Desktop との統合が切れて、Dockerも間接的に止まる。

4）状態を確認したいとき
docker ps -a　→ 停止中のコンテナも含めて確認できる。

5）Docker は run するたびに、新しい「コンテナ」を作成するので削除する
docker container prune　-＞確認メッセージが出るので y を入力。

6）イメージも不要なら消せる

docker image ls
docker rmi hello-world　＜-これでイメージ自体も消える！


requirements.txtの記入方法

fastapi==0.110.0
uvicorn==0.29.0
python-dotenv==1.0.1
requests==2.31.0
パッケージ名==バージョン番号 の形式で書きます。
バージョンを省略すると最新がインストールされます（ただし推奨されません）。

手動でも良いですが、今の環境で使っているライブラリを自動で記録したい場合は：
pip freeze > requirements.txt

他の人がこのファイルを使って環境構築する場合は：
pip install -r requirements.txt
