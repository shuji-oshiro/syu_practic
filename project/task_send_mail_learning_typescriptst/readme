
このプロジェクト（task_send_mail_learning_typescriptst）は、TypeScriptで書かれたアプリケーションで、
主にタスク管理やメール送信などの機能を学習・実装するためのものです。  

---

## 1. 実行環境

- **Docker対応**  
  Dockerイメージをビルドし、コンテナとしてアプリを起動できます。  
  ```
  docker build -t todo-app .
  docker run -p 3000:3000 todo-app
  ```

- **直接実行**  
  TypeScriptのまま `npx ts-node src/gui/server.ts` でサーバーを起動できます。

---

## 2. 開発環境セットアップ

- **Node.jsとnpmのインストール**  
  Node.js公式サイトからインストールし、バージョン確認。

- **npm初期化**  
  `npm init -y` で `package.json` を作成。

- **TypeScript導入**  
  ```
  npm install typescript --save-dev
  npx tsc --init
  ```

- **型定義ファイル**  
  Node.jsの型定義を追加（`@types/node`）。

---

## 3. TypeScriptのビルド・実行

- **TypeScriptのコンパイル**  
  `npx tsc` で `src` ディレクトリ配下のTypeScriptファイルをコンパイルし、`dist` ディレクトリに出力（`tsconfig.json`で設定）。

- **JavaScriptの実行**  
  `node dist/xxx.js` でコンパイル後のファイルを実行。

---

## 4. tsconfig.jsonの主な設定

- `outDir`: コンパイル後の出力先（例: `./dist`）
- `rootDir`: ソースファイルの場所（例: `./src`）
- `module`: モジュールシステム（CommonJS）
- `target`: 出力するJavaScriptのバージョン（ES2020）
- `esModuleInterop`, `moduleResolution`, `strict` など

---

## 5. 処理の流れ

1. **サーバー起動**  
   `src/gui/server.ts` からサーバーが起動し、WebアプリやAPIとして動作。

2. **タスク管理やメール送信**  
   プロジェクト名やディレクトリ名から、タスク管理やメール送信の機能。

3. **フロントエンド/GUI**  
   `src/gui/` 配下にフロントエンドやWebサーバーの実装がある可能性。

---

## 6. まとめ

- TypeScriptで書かれたサーバーサイドアプリケーション
- Dockerまたは直接Node.jsで実行可能
- タスク管理やメール送信の学習用プロジェクト
- 標準的なTypeScript/Node.jsプロジェクト構成

---

